@page "/chatex1"
@rendermode InteractiveServer
@inject ChatEx.ViewModels.ChatExViewModel vm

<div class="chat-container">
    <PageHeader Title="流式对话" />

    <!-- 历史消息区域 -->
    @if (vm.HistoryMeesageList.Count > 0)
    {
        <div class="history-messages">
            @foreach (var item in vm.HistoryMeesageList)
            {
                <MessageCard 
                    Title="@item.Title" 
                    ThinkingProcess="@item.ThinkingProcess" 
                    Content="@item.OutPutContent" />
            }
        </div>
    }

    <!-- 当前消息区域 -->
    @if (!string.IsNullOrEmpty(vm.ThinkingProcess))
    {
        <div class="current-message">
            <div class="message-title">@vm.Ques</div>
            <div class="thinking-process">@vm.ThinkingProcess</div>
            @if (!string.IsNullOrEmpty(vm.OutPutContent))
            {
                <div class="message-content">@vm.OutPutContent</div>
            }
        </div>
    }

    <!-- 输入区域 -->
    <ChatInput 
        InputText="@vm.Ques" 
        InputTextChanged="@((value) => vm.Ques = value)"
        OnSend="SendQuestion" />
</div>

@code {
    private async Task SendQuestion()
    {
        if (!string.IsNullOrWhiteSpace(vm.Ques))
        {
            await vm.SendQuestion();
        }
    }

    protected override void OnInitialized()
    {
        // 通知更新UI事件处理函数
        vm.UpdateUIEventHandler += UpdateUI;
        vm.Declare();
    }

    // 更新UI
    private async Task UpdateUI()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    // 通知更新UI事件处理函数
    private async void UpdateUI(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }
}