@page "/chatex1"
@rendermode InteractiveServer
@inject ChatEx.ViewModels.ChatExViewModel vm


<h3 class="title">ChatStream</h3>

<div class="chat-container" width="100%" height="100%">
    <!-- 历史消息区域 -->
    @if (vm.HistoryMeesageList.Count > 0)
    {
        <div class="history-messages">
            <ul>
                @foreach (var item in vm.HistoryMeesageList)
                {
                    <li class="message-item">
                        <!-- 消息标题 -->
                        <div class="message-title">
                            <strong>@item.Title</strong>
                        </div>

                        <!-- 思考过程 -->
                        <div class="thinking-process">
                            <p>@item.ThinkingProcess</p>
                        </div>

                        <!-- 输出内容 -->
                        <div class="message-content">
                            <p>@item.OutPutContent</p>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }

    <!-- 输入区域 -->
    <div class="input-area">
        <textarea @bind="vm.Ques"
                  id="inputFilter"
                  placeholder="请输入问题"
                  class="auto-height-textarea"
                  @bind:event="oninput"></textarea>
        <button class="btn btn-send" @onclick="SendQuestion">发送</button>
    </div>

    <!-- 当前消息区域 -->
    <div class="current-message">
        @if (!string.IsNullOrEmpty(vm.ThinkingProcess))
        {
            <!-- 问题 -->
            <div class="message-title">
                <strong>@vm.Ques</strong>
            </div>

            <!-- 思考过程 -->
            <div class="thinking-process">
                <p>@vm.ThinkingProcess</p>
            </div>

            <!-- 输出内容 -->
            @if (!string.IsNullOrEmpty(vm.OutPutContent))
            {
                <div class="message-content">
                    <p>@vm.OutPutContent</p>
                </div>
            }
        }
    </div>
</div>

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 20px;
    }

    @* .body{
        font-family: 'Roboto', sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 20px;
    } *@

    /* 标题样式 */
    .title {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }

    /* 聊天容器 */
    .chat-container {
        max-width: 800px;
        max-width: 100%;
        margin: 0 auto;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    /* 历史消息区域 */
    .history-messages {
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    /* 消息项 */
    .message-item {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    /* 消息标题 */
    .message-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
    }

    /* 思考过程 */
    .thinking-process {
        font-style: italic;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f0f0f0;
        border-radius: 5px;
    }

    /* 消息内容 */
    .message-content {
        font-size: 1rem;
        color: #444;
        line-height: 1.6;
        white-space: pre-wrap; /* 保留换行符 */
    }

    /* 输入区域 */
    .input-area {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    /* 文本框 */
    .auto-height-textarea {
        flex: 1;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        resize: vertical;
        min-height: 80px;
        max-height: 200px;
        overflow-y: auto;
    }

    /* 发送按钮 */
    .btn-send {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
    }

        .btn-send:hover {
            background-color: #0056b3;
        }

    /* 当前消息区域 */
    .current-message {
        margin-top: 20px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 8px;
        border: 1px solid #ddd;
    }
</style>

@code {
    private async Task SendQuestion()
    {
        await vm.SendQuestion();
    }

    protected override void OnInitialized()
    {
        // 通知更新UI事件处理函数
        vm.UpdateUIEventHandler += UpdateUI;
        vm.Declare();
    }

    // 更新UI
    private async Task UpdateUI()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    // 通知更新UI事件处理函数
    private async void UpdateUI(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }
}